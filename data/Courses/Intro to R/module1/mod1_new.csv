Class,Output,CorrectAnswer,AnswerChoices,AnswerTests,Hint,Figure,FigureType,VideoLinktext,"In this module, we will explore some basic building blocks of the R programming language.",,,,,,,cmd_question,"In it's simplest form, R can be used as an interactive calculator. Type `5 + 7` and press <enter>.",5 + 7,,,,,,text,"R simply prints the result of 13 by default. However, R is a programming language and often the reason we use a programming language as opposed to a calculator is to automate some process or avoid unneccessary repetition.",,,,,,,text,"In this case, we may want to use our result from above in a second calculation. Instead of retyping `5 + 7` every time we need it, we can just create a new variable that stores the result.",,,,,,,text,"The way you assign a value to a variable in R is by using the assignment operator, which is just a ""less than"" symbol followed by a dash. It looks like this: <-",,,,,,,text,Think of the assignment operator as an arrow. You are assigning the value on the right side of the arrow to the variable name on the left side of the arrow.,,,,,,,cmd_question,"To assign the result of `5 + 7` to a new variable called x, you type `x <- 5 + 7`. This can be read as ""x gets 5 plus 7."" Give it a try now.",x <- 5 + 7,,,,,,text,"You'll notice that R did not print the result of 13 this time. When you use the assignment operator, R assumes that you don't want to see the result immediately, but rather that you intend to use the result for something else later on.",,,,,,,cmd_question,"To view the contents of the variable x, just type `x` and press <enter>. Try it now.",x,,,,,,cmd_question,"Now, store the result of `x - 3` in a new variable called y.",y <- x - 3,,,,,,cmd_question,What is the value of y? Type `y` to find out.,,,,,,,text,"In the examples above, we know the numbers 3, 5, and 7 to be integers, but R sees them differently. Let's understand why.",,,,,,,text,"First, it's useful to distinguish data structures from data types. You can think of data structures as containers that hold data. Data types describe fundamental properties of that data.",,,,,,,text,The most basic data structure in R is a vector. Vectors are just collections of objects. Even single numbers are considered vectors of length 1.,,,,,,,,"There are two different flavors of vectors in R: atomic vectors and lists. The data contained in an atomic vector must all be of the same type, whereas the data contained in a list can be of many different types.",,,,,,,text,"Let's take a closer look at atomic vectors, since they are so fundamental to everything else in R.",,,,,,,text,"The easiest way to create an atomic vector in R is with the `c()` function, which stands for concatenate or combine. If you want to create a vector containing the numbers 2, 3, and 4, you type `c(2, 3, 4)`.",,,,,,,cmd_question,"Create a vector containing the numbers 2, 4, 6, and 8 and store it in a variable called z.","z <- c(2, 4, 6, 8)",,,,,,text,"Since z is an atomic vector, all of its elements must be the same data type. In this case, we might expect that data type to be ""integer"". However, as we mentioned in the last example, R doesn't think this way.",,,,,,,text,"The 4 most common types of atomic vectors in R are ""character"", ""double"" (often called ""numeric""), ""integer"", and ""logical"" (TRUE/FALSE).",,,,,,,cmd_question,"If you want to know the type of data stored in an atomic vector, use the `typeof()` function. Try `typeof(z)` to see how R views our numbers 2, 4, 6, and 8.",typeof(z),,,,,,text,"So R considers 2, 4, 6, and 8 to be of type ""double"", which essentially means decimal or real numbers. This is R's default data type for numeric data. If you explicitly want an integer in R, you have to specify the `L` suffix.",,,,,,,cmd_question,"For example, let's create a new vector called z1 that contains the integers 3 and 7. To do this, type `z1 <- c(3L, 7L)`.","z1 <- c(3L, 7L)",,,,,,cmd_question,"Now, check that z1 is of type integer using the `typeof()` function.",typeof(z1),,,,,,cmd_question,What do you think will happen if we create a new atomic vector called z2 that combines z and z1? Give it a try.,"z2 <- c(z, z1)",,,,,,cmd_question,Go ahead and print z2 to take a look at it.,z2,,,,,,cmd_question,Can you guess the type of z2? Go ahead and use `typeof()` to see if you're right.,typeof(z2),,,,,,text,"So z2 is of type ""double"". This may or may not be what you expected, but there is a method to the madness and it's called ""coersion"".",,,,,,,text,"The elements of an atomic vector must all be of the same type. When you mix different types as we did above, R finds the type that is the ""lowest common denominator"". In other words, it must figure out a single type that is capable of expressing all elements of the new vector without losing too much information. Let's play with some more examples until you get the hang of this concept.",,,,,,,cmd_question,"In R, text data is stored as strings of characters enclosed in double quotes. Create a new variable called `myName` that contains your name.","myName <- ""Nick""",,,,,,cmd_question,Take a look at the contents of `myName`.,myName,,,,,,cmd_question,Now check it's type.,typeof(myName),,,,,,cmd_question,"Now combine z2 and myName and assign the result to z3 with `z3 <- c(z2, myName)`.","z3 <- c(z2, myName)",,,,,,mult_question,What do you think will be the result of typeof(z3)?,"""character""","""character""; ""numeric""; ""integer""; ""raw""",,,,,cmd_question,View the contents of z3.,z3,,,,,,cmd_question,"All of the numbers in z3 have double quotes around them because R is now storing them as character strings. Confirm that z3 is of type ""character"".",typeof(z3),,,,,,text,"In this example, we attempted to mix a double (or numeric) vector with a character vector and we got a character vector. The reason for this is that we can easily represent numbers as character strings (e.g. ""3"" instead of 3), but there's no straightforward way to represent your name as number.",,,,,,,cmd_question,"To see the entire ""chain of command"" that R uses for coersion, check the help file for the `c()` function by typing `?c`.",?c,,,,,,text,"The first sentence of the Details section outlines the hierarchy for coersion: NULL < raw < logical < integer < double < complex < character < list < expression. You may not recognize all of the elements of this heirachy yet, but you get the main idea.",,,,,,,text,"It's also worth mentioning that the `?` function brings up the help file for any function and will become your best friend as you become a better programmer. Anytime you need it, just type ?function_name_here, and the help file for that function will pop right up.",,,,,,,